
Zad5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00000386  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000308  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000a  00004308  00000308  0000037c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000030  00000000  00000000  00000386  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000036a3  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000256a  00000000  00000000  00003af3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000052b  00000000  00000000  0000605d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00006588  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000188b  00000000  00000000  00006654  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000339  00000000  00000000  00007edf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00008218  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  90:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  94:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  98:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  9c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	0e 94 1e 01 	call	0x23c	; 0x23c <main>
  b0:	0c 94 82 01 	jmp	0x304	; 0x304 <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <display>:
	}
}

void I2C_stop()
{
	TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_STOP_gc;
  b8:	ef 92       	push	r14
  ba:	ff 92       	push	r15
  bc:	0f 93       	push	r16
  be:	1f 93       	push	r17
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
  c8:	2a 97       	sbiw	r28, 0x0a	; 10
  ca:	cd bf       	out	0x3d, r28	; 61
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	9a e0       	ldi	r25, 0x0A	; 10
  d0:	e8 e0       	ldi	r30, 0x08	; 8
  d2:	f3 e4       	ldi	r31, 0x43	; 67
  d4:	de 01       	movw	r26, r28
  d6:	11 96       	adiw	r26, 0x01	; 1
  d8:	01 90       	ld	r0, Z+
  da:	0d 92       	st	X+, r0
  dc:	9a 95       	dec	r25
  de:	e1 f7       	brne	.-8      	; 0xd8 <display+0x20>
  e0:	94 e6       	ldi	r25, 0x64	; 100
  e2:	a0 e8       	ldi	r26, 0x80	; 128
  e4:	b4 e0       	ldi	r27, 0x04	; 4
  e6:	54 e0       	ldi	r21, 0x04	; 4
  e8:	01 e0       	ldi	r16, 0x01	; 1
  ea:	10 e0       	ldi	r17, 0x00	; 0
  ec:	0c 0f       	add	r16, r28
  ee:	1d 1f       	adc	r17, r29
  f0:	08 0f       	add	r16, r24
  f2:	11 1d       	adc	r17, r1
  f4:	68 94       	set
  f6:	ee 24       	eor	r14, r14
  f8:	e6 f8       	bld	r14, 6
  fa:	ff 24       	eor	r15, r15
  fc:	f2 f8       	bld	r15, 2
  fe:	48 e0       	ldi	r20, 0x08	; 8
 100:	21 e0       	ldi	r18, 0x01	; 1
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	2c 0f       	add	r18, r28
 106:	3d 1f       	adc	r19, r29
 108:	26 0f       	add	r18, r22
 10a:	31 1d       	adc	r19, r1
 10c:	14 96       	adiw	r26, 0x04	; 4
 10e:	5c 93       	st	X, r21
 110:	14 97       	sbiw	r26, 0x04	; 4
 112:	f8 01       	movw	r30, r16
 114:	80 81       	ld	r24, Z
 116:	f7 01       	movw	r30, r14
 118:	84 83       	std	Z+4, r24	; 0x04
 11a:	e6 e4       	ldi	r30, 0x46	; 70
 11c:	f0 e1       	ldi	r31, 0x10	; 16
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <display+0x66>
 122:	00 c0       	rjmp	.+0      	; 0x124 <display+0x6c>
 124:	14 96       	adiw	r26, 0x04	; 4
 126:	4c 93       	st	X, r20
 128:	14 97       	sbiw	r26, 0x04	; 4
 12a:	f9 01       	movw	r30, r18
 12c:	80 81       	ld	r24, Z
 12e:	f7 01       	movw	r30, r14
 130:	84 83       	std	Z+4, r24	; 0x04
 132:	e6 e4       	ldi	r30, 0x46	; 70
 134:	f0 e1       	ldi	r31, 0x10	; 16
 136:	31 97       	sbiw	r30, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <display+0x7e>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <display+0x84>
 13c:	91 50       	subi	r25, 0x01	; 1
 13e:	31 f7       	brne	.-52     	; 0x10c <display+0x54>
 140:	2a 96       	adiw	r28, 0x0a	; 10
 142:	cd bf       	out	0x3d, r28	; 61
 144:	de bf       	out	0x3e, r29	; 62
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	1f 91       	pop	r17
 14c:	0f 91       	pop	r16
 14e:	ff 90       	pop	r15
 150:	ef 90       	pop	r14
 152:	08 95       	ret

00000154 <I2C_init>:
 154:	e0 ea       	ldi	r30, 0xA0	; 160
 156:	f8 e0       	ldi	r31, 0x08	; 8
 158:	8b e0       	ldi	r24, 0x0B	; 11
 15a:	86 83       	std	Z+6, r24	; 0x06
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	85 83       	std	Z+5, r24	; 0x05
 160:	83 83       	std	Z+3, r24	; 0x03
 162:	08 95       	ret

00000164 <I2C_start>:
 164:	88 0f       	add	r24, r24
 166:	86 2b       	or	r24, r22
 168:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7008a7>
 16c:	61 11       	cpse	r22, r1
 16e:	0d c0       	rjmp	.+26     	; 0x18a <I2C_start+0x26>
 170:	e0 ea       	ldi	r30, 0xA0	; 160
 172:	f8 e0       	ldi	r31, 0x08	; 8
 174:	85 81       	ldd	r24, Z+5	; 0x05
 176:	86 ff       	sbrs	r24, 6
 178:	fd cf       	rjmp	.-6      	; 0x174 <I2C_start+0x10>
 17a:	e0 ea       	ldi	r30, 0xA0	; 160
 17c:	f8 e0       	ldi	r31, 0x08	; 8
 17e:	85 81       	ldd	r24, Z+5	; 0x05
 180:	80 64       	ori	r24, 0x40	; 64
 182:	85 83       	std	Z+5, r24	; 0x05
 184:	82 e0       	ldi	r24, 0x02	; 2
 186:	84 83       	std	Z+4, r24	; 0x04
 188:	08 95       	ret
 18a:	e0 ea       	ldi	r30, 0xA0	; 160
 18c:	f8 e0       	ldi	r31, 0x08	; 8
 18e:	85 81       	ldd	r24, Z+5	; 0x05
 190:	88 23       	and	r24, r24
 192:	ec f7       	brge	.-6      	; 0x18e <I2C_start+0x2a>
 194:	e0 ea       	ldi	r30, 0xA0	; 160
 196:	f8 e0       	ldi	r31, 0x08	; 8
 198:	85 81       	ldd	r24, Z+5	; 0x05
 19a:	80 68       	ori	r24, 0x80	; 128
 19c:	85 83       	std	Z+5, r24	; 0x05
 19e:	85 81       	ldd	r24, Z+5	; 0x05
 1a0:	82 95       	swap	r24
 1a2:	81 70       	andi	r24, 0x01	; 1
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	89 27       	eor	r24, r25
 1a8:	08 95       	ret

000001aa <I2C_write>:
}

uint8_t I2C_write(uint8_t data)
{
	TWI0.MDATA = data;
 1aa:	e0 ea       	ldi	r30, 0xA0	; 160
 1ac:	f8 e0       	ldi	r31, 0x08	; 8
 1ae:	80 87       	std	Z+8, r24	; 0x08
	while(!(TWI0.MSTATUS) & (TWI_WIF_bm));
 1b0:	85 81       	ldd	r24, Z+5	; 0x05
	TWI0.MSTATUS |= TWI_WIF_bm;
 1b2:	85 81       	ldd	r24, Z+5	; 0x05
 1b4:	80 64       	ori	r24, 0x40	; 64
 1b6:	85 83       	std	Z+5, r24	; 0x05
	TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc;
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	84 83       	std	Z+4, r24	; 0x04
	return !(TWI0.MSTATUS & TWI_RXACK_bm);
 1bc:	85 81       	ldd	r24, Z+5	; 0x05
 1be:	82 95       	swap	r24
 1c0:	81 70       	andi	r24, 0x01	; 1
}
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	89 27       	eor	r24, r25
 1c6:	08 95       	ret

000001c8 <I2C_read>:

uint8_t I2C_read(uint8_t last_byte)
{
	while(!(TWI0.MSTATUS & TWI_CLKHOLD_bm));
 1c8:	e0 ea       	ldi	r30, 0xA0	; 160
 1ca:	f8 e0       	ldi	r31, 0x08	; 8
 1cc:	95 81       	ldd	r25, Z+5	; 0x05
 1ce:	95 ff       	sbrs	r25, 5
 1d0:	fd cf       	rjmp	.-6      	; 0x1cc <I2C_read+0x4>
	if(last_byte)
 1d2:	88 23       	and	r24, r24
 1d4:	21 f0       	breq	.+8      	; 0x1de <I2C_read+0x16>
	{
		TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_STOP_gc;
 1d6:	87 e0       	ldi	r24, 0x07	; 7
 1d8:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7008a4>
 1dc:	03 c0       	rjmp	.+6      	; 0x1e4 <I2C_read+0x1c>
	}
	else
	{
		TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc;
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7008a4>
	}
	return TWI0.MDATA;
 1e4:	80 91 a8 08 	lds	r24, 0x08A8	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7008a8>
}
 1e8:	08 95       	ret

000001ea <read_half>:

uint16_t read_half(uint8_t addr, uint8_t reg)
{
 1ea:	0f 93       	push	r16
 1ec:	1f 93       	push	r17
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	c8 2f       	mov	r28, r24
	uint8_t msB = 0;
	uint8_t lsB = 0;
	
	I2C_start(addr, 0);
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	0e 94 b2 00 	call	0x164	; 0x164 <I2C_start>
	I2C_write(0x00);
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	0e 94 d5 00 	call	0x1aa	; 0x1aa <I2C_write>
	}
}

void I2C_stop()
{
	TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_STOP_gc;
 200:	00 ea       	ldi	r16, 0xA0	; 160
 202:	18 e0       	ldi	r17, 0x08	; 8
 204:	d7 e0       	ldi	r29, 0x07	; 7
 206:	f8 01       	movw	r30, r16
 208:	d4 83       	std	Z+4, r29	; 0x04
	uint8_t lsB = 0;
	
	I2C_start(addr, 0);
	I2C_write(0x00);
	I2C_stop();
	I2C_start(addr, 1);
 20a:	61 e0       	ldi	r22, 0x01	; 1
 20c:	8c 2f       	mov	r24, r28
 20e:	0e 94 b2 00 	call	0x164	; 0x164 <I2C_start>
	msB = I2C_read(0);
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <I2C_read>
 218:	c8 2f       	mov	r28, r24
	lsB = I2C_read(1);
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <I2C_read>
	}
}

void I2C_stop()
{
	TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_STOP_gc;
 220:	f8 01       	movw	r30, r16
 222:	d4 83       	std	Z+4, r29	; 0x04
	I2C_start(addr, 1);
	msB = I2C_read(0);
	lsB = I2C_read(1);
	I2C_stop();
	
	return ((uint16_t)msB << 8) | lsB;
 224:	2c 2f       	mov	r18, r28
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	32 2f       	mov	r19, r18
 22a:	22 27       	eor	r18, r18
	//return msB;
}
 22c:	a9 01       	movw	r20, r18
 22e:	48 2b       	or	r20, r24
 230:	ca 01       	movw	r24, r20
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	1f 91       	pop	r17
 238:	0f 91       	pop	r16
 23a:	08 95       	ret

0000023c <main>:
int main(void)
{
	//heater
	uint8_t period = (F_CPU  / (16 * 1000)) - 1;

	PORTF.DIR |= 0x20;
 23c:	e0 ea       	ldi	r30, 0xA0	; 160
 23e:	f4 e0       	ldi	r31, 0x04	; 4
 240:	80 81       	ld	r24, Z
 242:	80 62       	ori	r24, 0x20	; 32
 244:	80 83       	st	Z, r24
	
	TCA0.SPLIT.CTRLD |= 0x01;
 246:	e0 e0       	ldi	r30, 0x00	; 0
 248:	fa e0       	ldi	r31, 0x0A	; 10
 24a:	83 81       	ldd	r24, Z+3	; 0x03
 24c:	81 60       	ori	r24, 0x01	; 1
 24e:	83 83       	std	Z+3, r24	; 0x03
	TCA0.SPLIT.CTRLB |= 0x40;
 250:	81 81       	ldd	r24, Z+1	; 0x01
 252:	80 64       	ori	r24, 0x40	; 64
 254:	81 83       	std	Z+1, r24	; 0x01
	
	TCA0.SPLIT.CTRLA |= 0x60;
 256:	80 81       	ld	r24, Z
 258:	80 66       	ori	r24, 0x60	; 96
 25a:	80 83       	st	Z, r24
	
	TCA0.SPLIT.HPER = period;
 25c:	8f ec       	ldi	r24, 0xCF	; 207
 25e:	87 a3       	std	Z+39, r24	; 0x27
	TCA0.SPLIT.HCMP2 = (uint8_t)((float)period * 0.99f);
 260:	8c ec       	ldi	r24, 0xCC	; 204
 262:	85 a7       	std	Z+45, r24	; 0x2d
	
	PORTMUX.TCAROUTEA = PORTMUX_TCA0_PORTF_gc;
 264:	85 e0       	ldi	r24, 0x05	; 5
 266:	80 93 e4 05 	sts	0x05E4, r24	; 0x8005e4 <__TEXT_REGION_LENGTH__+0x7005e4>
	
	TCA0.SPLIT.CTRLA |= 0x01;
 26a:	80 81       	ld	r24, Z
 26c:	81 60       	ori	r24, 0x01	; 1
 26e:	80 83       	st	Z, r24
	//heater end

    uint16_t temp = 0;
	uint8_t msB, lsB;
	
	PORTE.DIRSET = PIN2_bm | PIN3_bm;
 270:	8c e0       	ldi	r24, 0x0C	; 12
 272:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <__TEXT_REGION_LENGTH__+0x700481>
	PORTC.DIR = 0xff;
 276:	8f ef       	ldi	r24, 0xFF	; 255
 278:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>
	
	I2C_init();
 27c:	0e 94 aa 00 	call	0x154	; 0x154 <I2C_init>
				temp = ((temp & 0xFF00) >> 8);
			}
			//temp = (temp & 0xFF00 << 8) + temp & 0x00FF;
			msB = (uint8_t)temp/10;
			lsB = (uint8_t)temp%10;
			display(msB,lsB);
 280:	ca e0       	ldi	r28, 0x0A	; 10
 282:	d0 e0       	ldi	r29, 0x00	; 0
	
	I2C_init();
	
    while (1)
    {
		temp = read_half(0x48, 0x00);
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	88 e4       	ldi	r24, 0x48	; 72
 288:	0e 94 f5 00 	call	0x1ea	; 0x1ea <read_half>
		if(!(temp & 0x8000))
 28c:	99 23       	and	r25, r25
 28e:	d4 f3       	brlt	.-12     	; 0x284 <main+0x48>
		{
			if (temp & 0x0080) 
 290:	87 ff       	sbrs	r24, 7
 292:	04 c0       	rjmp	.+8      	; 0x29c <main+0x60>
			{											
				temp = ((temp & 0xFF00) >> 8) + 1;
 294:	89 2f       	mov	r24, r25
 296:	99 27       	eor	r25, r25
 298:	01 96       	adiw	r24, 0x01	; 1
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <main+0x64>
			} 
			else 
			{			
				temp = ((temp & 0xFF00) >> 8);
 29c:	89 2f       	mov	r24, r25
 29e:	99 27       	eor	r25, r25
			}
			//temp = (temp & 0xFF00 << 8) + temp & 0x00FF;
			msB = (uint8_t)temp/10;
 2a0:	99 27       	eor	r25, r25
			lsB = (uint8_t)temp%10;
			display(msB,lsB);
 2a2:	be 01       	movw	r22, r28
 2a4:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <__divmodhi4>
 2a8:	96 2f       	mov	r25, r22
 2aa:	68 2f       	mov	r22, r24
 2ac:	89 2f       	mov	r24, r25
 2ae:	0e 94 5c 00 	call	0xb8	; 0xb8 <display>
 2b2:	e8 cf       	rjmp	.-48     	; 0x284 <main+0x48>

000002b4 <__divmodhi4>:
 2b4:	97 fb       	bst	r25, 7
 2b6:	07 2e       	mov	r0, r23
 2b8:	16 f4       	brtc	.+4      	; 0x2be <__divmodhi4+0xa>
 2ba:	00 94       	com	r0
 2bc:	07 d0       	rcall	.+14     	; 0x2cc <__divmodhi4_neg1>
 2be:	77 fd       	sbrc	r23, 7
 2c0:	09 d0       	rcall	.+18     	; 0x2d4 <__divmodhi4_neg2>
 2c2:	0e 94 6e 01 	call	0x2dc	; 0x2dc <__udivmodhi4>
 2c6:	07 fc       	sbrc	r0, 7
 2c8:	05 d0       	rcall	.+10     	; 0x2d4 <__divmodhi4_neg2>
 2ca:	3e f4       	brtc	.+14     	; 0x2da <__divmodhi4_exit>

000002cc <__divmodhi4_neg1>:
 2cc:	90 95       	com	r25
 2ce:	81 95       	neg	r24
 2d0:	9f 4f       	sbci	r25, 0xFF	; 255
 2d2:	08 95       	ret

000002d4 <__divmodhi4_neg2>:
 2d4:	70 95       	com	r23
 2d6:	61 95       	neg	r22
 2d8:	7f 4f       	sbci	r23, 0xFF	; 255

000002da <__divmodhi4_exit>:
 2da:	08 95       	ret

000002dc <__udivmodhi4>:
 2dc:	aa 1b       	sub	r26, r26
 2de:	bb 1b       	sub	r27, r27
 2e0:	51 e1       	ldi	r21, 0x11	; 17
 2e2:	07 c0       	rjmp	.+14     	; 0x2f2 <__udivmodhi4_ep>

000002e4 <__udivmodhi4_loop>:
 2e4:	aa 1f       	adc	r26, r26
 2e6:	bb 1f       	adc	r27, r27
 2e8:	a6 17       	cp	r26, r22
 2ea:	b7 07       	cpc	r27, r23
 2ec:	10 f0       	brcs	.+4      	; 0x2f2 <__udivmodhi4_ep>
 2ee:	a6 1b       	sub	r26, r22
 2f0:	b7 0b       	sbc	r27, r23

000002f2 <__udivmodhi4_ep>:
 2f2:	88 1f       	adc	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	5a 95       	dec	r21
 2f8:	a9 f7       	brne	.-22     	; 0x2e4 <__udivmodhi4_loop>
 2fa:	80 95       	com	r24
 2fc:	90 95       	com	r25
 2fe:	bc 01       	movw	r22, r24
 300:	cd 01       	movw	r24, r26
 302:	08 95       	ret

00000304 <_exit>:
 304:	f8 94       	cli

00000306 <__stop_program>:
 306:	ff cf       	rjmp	.-2      	; 0x306 <__stop_program>
