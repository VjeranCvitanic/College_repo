
Zadatak_3_Cvitanic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  000001da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000a  0000415c  0000015c  000001d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000030  00000000  00000000  000001da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002858  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002405  00000000  00000000  00002ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000392  00000000  00000000  00004ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  0000525c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012b0  00000000  00000000  00005290  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014f  00000000  00000000  00006540  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000668f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  90:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  94:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  98:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  9c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  b0:	0c 94 ac 00 	jmp	0x158	; 0x158 <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <main>:
#define SEG_DP (1 << 6) 



int main(void)
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	2a 97       	sbiw	r28, 0x0a	; 10
  c2:	cd bf       	out	0x3d, r28	; 61
  c4:	de bf       	out	0x3e, r29	; 62
	const unsigned char segment_codes[10] = { SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F, // 0
  c6:	8a e0       	ldi	r24, 0x0A	; 10
  c8:	ec e5       	ldi	r30, 0x5C	; 92
  ca:	f1 e4       	ldi	r31, 0x41	; 65
  cc:	de 01       	movw	r26, r28
  ce:	11 96       	adiw	r26, 0x01	; 1
  d0:	01 90       	ld	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	8a 95       	dec	r24
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x18>
		SEG_A | SEG_B | SEG_C,       // 7
		SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G, // 8
		SEG_A | SEG_B | SEG_C | SEG_D | SEG_F | SEG_G}; // 9
		
		
		PORTE.DIRSET = PIN2_bm | PIN3_bm;
  d8:	8c e0       	ldi	r24, 0x0C	; 12
  da:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <__TEXT_REGION_LENGTH__+0x700481>
		PORTC.DIR = 0xff;
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>
  e4:	8e 01       	movw	r16, r28
  e6:	05 5f       	subi	r16, 0xF5	; 245
  e8:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				for(uint8_t cnt_2 = 0; cnt_2 < 10; cnt_2++)
				{
					for(uint8_t i = 0; i < 100; i++)
					{
						PORTE.OUT = PIN2_bm;
  ea:	a0 e8       	ldi	r26, 0x80	; 128
  ec:	b4 e0       	ldi	r27, 0x04	; 4
						PORTC.OUT = segment_codes[cnt_1];
  ee:	68 94       	set
  f0:	ee 24       	eor	r14, r14
  f2:	e6 f8       	bld	r14, 6
  f4:	ff 24       	eor	r15, r15
  f6:	f2 f8       	bld	r15, 2
			{
				for(uint8_t cnt_2 = 0; cnt_2 < 10; cnt_2++)
				{
					for(uint8_t i = 0; i < 100; i++)
					{
						PORTE.OUT = PIN2_bm;
  f8:	74 e0       	ldi	r23, 0x04	; 4
						PORTC.OUT = segment_codes[cnt_1];
						_delay_ms(5);
						PORTE.OUT = PIN3_bm;
  fa:	68 e0       	ldi	r22, 0x08	; 8
#define SEG_DP (1 << 6) 



int main(void)
{
  fc:	ae 01       	movw	r20, r28
  fe:	4f 5f       	subi	r20, 0xFF	; 255
 100:	5f 4f       	sbci	r21, 0xFF	; 255
 102:	26 c0       	rjmp	.+76     	; 0x150 <main+0x98>
			{
				for(uint8_t cnt_2 = 0; cnt_2 < 10; cnt_2++)
				{
					for(uint8_t i = 0; i < 100; i++)
					{
						PORTE.OUT = PIN2_bm;
 104:	14 96       	adiw	r26, 0x04	; 4
 106:	7c 93       	st	X, r23
 108:	14 97       	sbiw	r26, 0x04	; 4
						PORTC.OUT = segment_codes[cnt_1];
 10a:	fa 01       	movw	r30, r20
 10c:	90 81       	ld	r25, Z
 10e:	f7 01       	movw	r30, r14
 110:	94 83       	std	Z+4, r25	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	e6 e4       	ldi	r30, 0x46	; 70
 114:	f0 e1       	ldi	r31, 0x10	; 16
 116:	31 97       	sbiw	r30, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <main+0x5e>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x64>
						_delay_ms(5);
						PORTE.OUT = PIN3_bm;
 11c:	14 96       	adiw	r26, 0x04	; 4
 11e:	6c 93       	st	X, r22
 120:	14 97       	sbiw	r26, 0x04	; 4
						PORTC.OUT = segment_codes[cnt_2];
 122:	f9 01       	movw	r30, r18
 124:	90 81       	ld	r25, Z
 126:	f7 01       	movw	r30, r14
 128:	94 83       	std	Z+4, r25	; 0x04
 12a:	e6 e4       	ldi	r30, 0x46	; 70
 12c:	f0 e1       	ldi	r31, 0x10	; 16
 12e:	31 97       	sbiw	r30, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <main+0x76>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x7c>
 134:	81 50       	subi	r24, 0x01	; 1
		{
			for(uint8_t cnt_1 = 0; cnt_1 < 10; cnt_1++)
			{
				for(uint8_t cnt_2 = 0; cnt_2 < 10; cnt_2++)
				{
					for(uint8_t i = 0; i < 100; i++)
 136:	31 f7       	brne	.-52     	; 0x104 <main+0x4c>
 138:	2f 5f       	subi	r18, 0xFF	; 255
 13a:	3f 4f       	sbci	r19, 0xFF	; 255
		
		while(1)
		{
			for(uint8_t cnt_1 = 0; cnt_1 < 10; cnt_1++)
			{
				for(uint8_t cnt_2 = 0; cnt_2 < 10; cnt_2++)
 13c:	02 17       	cp	r16, r18
 13e:	13 07       	cpc	r17, r19
 140:	11 f0       	breq	.+4      	; 0x146 <main+0x8e>
#define SEG_DP (1 << 6) 



int main(void)
{
 142:	84 e6       	ldi	r24, 0x64	; 100
 144:	df cf       	rjmp	.-66     	; 0x104 <main+0x4c>
 146:	4f 5f       	subi	r20, 0xFF	; 255
 148:	5f 4f       	sbci	r21, 0xFF	; 255
		PORTE.DIRSET = PIN2_bm | PIN3_bm;
		PORTC.DIR = 0xff;
		
		while(1)
		{
			for(uint8_t cnt_1 = 0; cnt_1 < 10; cnt_1++)
 14a:	04 17       	cp	r16, r20
 14c:	15 07       	cpc	r17, r21
 14e:	b1 f2       	breq	.-84     	; 0xfc <main+0x44>
#define SEG_DP (1 << 6) 



int main(void)
{
 150:	9e 01       	movw	r18, r28
 152:	2f 5f       	subi	r18, 0xFF	; 255
 154:	3f 4f       	sbci	r19, 0xFF	; 255
 156:	f5 cf       	rjmp	.-22     	; 0x142 <main+0x8a>

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
