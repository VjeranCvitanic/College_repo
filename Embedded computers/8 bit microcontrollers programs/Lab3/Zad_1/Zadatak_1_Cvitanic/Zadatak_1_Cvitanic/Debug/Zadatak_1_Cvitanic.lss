
Zadatak_1_Cvitanic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000276f  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002360  00000000  00000000  000029bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000318  00000000  00000000  00004d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00005034  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001258  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  000062c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  90:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  94:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  98:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  9c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  b0:	0c 94 ad 00 	jmp	0x15a	; 0x15a <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <turn_all_off>:
volatile uint8_t pa[4] = {0};
volatile uint8_t interrupt_signal = 0;*/

void turn_all_off()
{
	PORTD.OUT &= ~(1 << 7);
  b8:	e0 e6       	ldi	r30, 0x60	; 96
  ba:	f4 e0       	ldi	r31, 0x04	; 4
  bc:	84 81       	ldd	r24, Z+4	; 0x04
  be:	8f 77       	andi	r24, 0x7F	; 127
  c0:	84 83       	std	Z+4, r24	; 0x04
	PORTD.OUT &= ~(1 << 6);
  c2:	84 81       	ldd	r24, Z+4	; 0x04
  c4:	8f 7b       	andi	r24, 0xBF	; 191
  c6:	84 83       	std	Z+4, r24	; 0x04
	PORTD.OUT &= ~(1 << 5);
  c8:	84 81       	ldd	r24, Z+4	; 0x04
  ca:	8f 7d       	andi	r24, 0xDF	; 223
  cc:	84 83       	std	Z+4, r24	; 0x04
	PORTD.OUT &= ~(1 << 4);
  ce:	84 81       	ldd	r24, Z+4	; 0x04
  d0:	8f 7e       	andi	r24, 0xEF	; 239
  d2:	84 83       	std	Z+4, r24	; 0x04
  d4:	08 95       	ret

000000d6 <main>:
}

int main(void)
{
	PORTD.DIRSET = 0xF0;
  d6:	80 ef       	ldi	r24, 0xF0	; 240
  d8:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <__TEXT_REGION_LENGTH__+0x700461>
		
	PORTA.DIRCLR = 0xF0;
  dc:	e0 e0       	ldi	r30, 0x00	; 0
  de:	f4 e0       	ldi	r31, 0x04	; 4
  e0:	82 83       	std	Z+2, r24	; 0x02
	
	PORTA.PIN7CTRL |= PORT_PULLUPEN_bm;
  e2:	87 89       	ldd	r24, Z+23	; 0x17
  e4:	88 60       	ori	r24, 0x08	; 8
  e6:	87 8b       	std	Z+23, r24	; 0x17
	PORTA.PIN6CTRL |= PORT_PULLUPEN_bm;
  e8:	86 89       	ldd	r24, Z+22	; 0x16
  ea:	88 60       	ori	r24, 0x08	; 8
  ec:	86 8b       	std	Z+22, r24	; 0x16
	PORTA.PIN5CTRL |= PORT_PULLUPEN_bm;
  ee:	85 89       	ldd	r24, Z+21	; 0x15
  f0:	88 60       	ori	r24, 0x08	; 8
  f2:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN4CTRL |= PORT_PULLUPEN_bm;
  f4:	84 89       	ldd	r24, Z+20	; 0x14
  f6:	88 60       	ori	r24, 0x08	; 8
  f8:	84 8b       	std	Z+20, r24	; 0x14
	
	while(1)
	{
		if((PORTA.IN & (1 << 7)) == 0)
  fa:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
  fe:	88 23       	and	r24, r24
 100:	44 f0       	brlt	.+16     	; 0x112 <main+0x3c>
		{
			turn_all_off();
 102:	0e 94 5c 00 	call	0xb8	; 0xb8 <turn_all_off>
			PORTD.OUT |= (1 << 7);
 106:	e0 e6       	ldi	r30, 0x60	; 96
 108:	f4 e0       	ldi	r31, 0x04	; 4
 10a:	84 81       	ldd	r24, Z+4	; 0x04
 10c:	80 68       	ori	r24, 0x80	; 128
 10e:	84 83       	std	Z+4, r24	; 0x04
 110:	f4 cf       	rjmp	.-24     	; 0xfa <main+0x24>
		}
		else if((PORTA.IN & (1 << 6)) == 0)
 112:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
 116:	86 fd       	sbrc	r24, 6
 118:	08 c0       	rjmp	.+16     	; 0x12a <main+0x54>
		{
			turn_all_off();
 11a:	0e 94 5c 00 	call	0xb8	; 0xb8 <turn_all_off>
			PORTD.OUT |= (1 << 6);
 11e:	e0 e6       	ldi	r30, 0x60	; 96
 120:	f4 e0       	ldi	r31, 0x04	; 4
 122:	84 81       	ldd	r24, Z+4	; 0x04
 124:	80 64       	ori	r24, 0x40	; 64
 126:	84 83       	std	Z+4, r24	; 0x04
 128:	e8 cf       	rjmp	.-48     	; 0xfa <main+0x24>
		}
		else if((PORTA.IN & (1 << 5)) == 0)
 12a:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
 12e:	85 fd       	sbrc	r24, 5
 130:	08 c0       	rjmp	.+16     	; 0x142 <main+0x6c>
		{
			turn_all_off();
 132:	0e 94 5c 00 	call	0xb8	; 0xb8 <turn_all_off>
			PORTD.OUT |= (1 << 5);
 136:	e0 e6       	ldi	r30, 0x60	; 96
 138:	f4 e0       	ldi	r31, 0x04	; 4
 13a:	84 81       	ldd	r24, Z+4	; 0x04
 13c:	80 62       	ori	r24, 0x20	; 32
 13e:	84 83       	std	Z+4, r24	; 0x04
 140:	dc cf       	rjmp	.-72     	; 0xfa <main+0x24>
		}
		else if((PORTA.IN & (1 << 4)) == 0)
 142:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
 146:	84 fd       	sbrc	r24, 4
 148:	d8 cf       	rjmp	.-80     	; 0xfa <main+0x24>
		{
			turn_all_off();
 14a:	0e 94 5c 00 	call	0xb8	; 0xb8 <turn_all_off>
			PORTD.OUT |= (1 << 4);
 14e:	e0 e6       	ldi	r30, 0x60	; 96
 150:	f4 e0       	ldi	r31, 0x04	; 4
 152:	84 81       	ldd	r24, Z+4	; 0x04
 154:	80 61       	ori	r24, 0x10	; 16
 156:	84 83       	std	Z+4, r24	; 0x04
 158:	d0 cf       	rjmp	.-96     	; 0xfa <main+0x24>

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
